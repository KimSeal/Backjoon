package backjoon;
import java.io.*;
import java.util.*;
/*
 * 1. 사용자로부터 테스트 케이스 수를 입력받고 그만큼 2번부터 4번까지 반복한다.
 * 2. 편의점 수와 집, 편의점, 도착점의 위치를 받는다.
 * 3. 이들의 거리를 구하고 1000이하라면 연결해준다.
 * 4. 시작 점부터 bfs로 탐색을 진행한다. 큐가 비기전에 도착지에 도달했다면 happy, 아니면 sad를 StringBuilder에 올린다.
 * 5. StringBuilder를 출력한다.
 */
public class b9205_맥주마시면서걸어가기_김상우 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringBuilder sb = new StringBuilder();
	static int board[][] = new int [102][102];
	//위치 정보 저장을 위한 class
	static class place {
		int y;
		int x;
		place(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
	//거리계산을 위한 abs 함수.
	static int abs(int a) {
		if(a<0) return a*-1;
		return a;
	}
	public static void main(String[] args) throws IOException{
		//bfs용 queue, 위치 정보 저장용 list
		Queue<Integer> queue = new LinkedList<>();
		List<place> list = new ArrayList<>();
		//1. 사용자로부터 테스트 케이스 수를 입력받고 그만큼 2번부터 4번까지 반복한다.
		int testNum = Integer.parseInt(br.readLine().trim());
		int storeNum, input0, input1, tempY, tempX;
		boolean visited[] = new boolean[102];
		String[] str;
		int tempDist;
		for(int testCase=0;testCase<testNum;testCase++) {
			queue.clear();
			list.clear();
			//2. 편의점 수와 집, 편의점, 도착점의 위치를 받는다.
			storeNum = Integer.parseInt(br.readLine().trim());
			for(int idx=0;idx<storeNum+2;idx++) {
				visited[idx] = false;
				str = br.readLine().trim().split(" ");
				list.add(new place(Integer.parseInt(str[0]),Integer.parseInt(str[1])));
			}
			//3. 이들의 거리를 구하고 1000이하라면 연결해준다.
			for(int home0 =0;home0<storeNum+2;home0++) {
				for(int home1 =home0;home1<storeNum+2;home1++) {
					if(home0==home1) {
						board[home0][home1] = 99999999;
						board[home1][home0] = 99999999;
						continue;
					}
					tempDist = abs(list.get(home0).y - list.get(home1).y)+abs(list.get(home0).x - list.get(home1).x);
					if(tempDist>1000) {
						board[home0][home1] = 99999999;
						board[home1][home0] = 99999999;
					}
					else {
						board[home0][home1] = 1;
						board[home1][home0] = 1;
					}
				}
			}
			//4. 시작 점부터 bfs로 탐색을 진행한다. 큐가 비기전에 도착지에 도달했다면 happy, 아니면 sad를 StringBuilder에 올린다.
			queue.add(0);
			visited[0] = true;
			String feel = "sad\n";
			while(!queue.isEmpty()) {
				int tempVal = queue.poll();
				if(tempVal == storeNum+1) {
					feel = "happy\n";
					break;
				}
				for(int home0 =0;home0<storeNum+2;home0++) {
					if(!visited[home0] && board[tempVal][home0] ==1) {
						visited[home0] = true;
						queue.add(home0);
					}
				}
			}
			sb.append(feel);
			
		}
		//5. StringBuilder를 출력한다.
		System.out.print(sb);
	}
}
