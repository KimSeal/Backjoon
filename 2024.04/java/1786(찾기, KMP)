import java.io.*;
import java.util.*;
/*
 * 1. 사용자로부터 문자열 2개를 입력받는다. 각 문자열은 전체 문자열과 찾는 문자열을 의미한다.
 * 2. fail 배열을 만든다.(앞가 뒤가 같은 문자열인 경우 탐색하는 처리.)
 * 3. 이를 이용해서 전체 문자열을 탐색한다.(KMP)
 */
public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringBuilder sb = new StringBuilder();
	static int fail[] = new int[1000001];
	static String str;
	static String findStr;
	public static void failMake() {
		fail[0] = 0;
		int lenVal = 0;
		for(int idx=1;idx<findStr.length();idx++) {
			while(lenVal>0 && findStr.charAt(idx) != findStr.charAt(lenVal))
				lenVal = fail[lenVal-1];
			if(findStr.charAt(idx) == findStr.charAt(lenVal)) fail[idx] = ++lenVal;
		}
	}
	public static void main(String[] args) throws IOException{
		str = br.readLine();
		findStr = br.readLine();
		if(str.length()<findStr.length()) {
			System.out.println(0);
			return;
		}
		failMake();
		int result=0;
		int lenVal =0;
		
		for(int idx=0;idx<str.length();idx++) {
			while(lenVal>0 && 
					str.charAt(idx)!= 
					findStr.charAt(lenVal)) {
				lenVal = fail[lenVal-1];
			}
			if(str.charAt(idx)==findStr.charAt(lenVal)) {
				if(lenVal == findStr.length()-1) {
					result++;
					sb.append((idx-findStr.length()+2) + " ");
					lenVal = fail[lenVal];
				}
				else {
					lenVal++;
				}
			}

		}
		System.out.println(result +"\n"+ sb);
	}
	
}
