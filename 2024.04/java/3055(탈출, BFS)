package backjoon;
import java.io.*;
import java.util.*;
/*
 * 1. 사용자로부터 전체 가로, 세로 길이를 입력받는다.
 * 2. 전체 공간 정보를 입력받고 물의 위치와 고슴도치 위치를 입력받는다.
 * 3. 물과 고슴도치에 대해 고슴도치의 이동이 불가능하거나 비버집에 도착할때까지 4,5를 반복한다.
 * 4. 물들의 위치를 기준으로 먼저 BFS를 진행한다. 물이 찬곳은 돌과 같이 이동할 수 없게한다.
 * 5. 고슴도치를 기준으로 BFS를 진행한다. 물은 이동할 수 있도록 별도의 문자로 처리한다.
 * 6. 도착했다면 걸린 시간, 도착하기 전에 이동을 할 수 없게 되었다면 KAKTUS를 출력한다.
 */
public class b3055_탈출_김상우 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringBuilder sb = new StringBuilder();
	static int board[][] = new int [102][102];
	//위치 정보 저장을 위한 class
	static class place {
		int y;
		int x;
		place(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
	static int dx[]= {0,1,0,-1};
	static int dy[] = {-1,0,1,0};
	public static void main(String[] args) throws IOException{
		Queue<place> waterQ = new LinkedList<>();
		Queue<place> kakQ = new LinkedList<>();
		//1. 사용자로부터 전체 가로, 세로 길이를 입력받는다.
		String str[] = br.readLine().trim().split(" ");
		int colLen = Integer.parseInt(str[0]);
		int rowLen = Integer.parseInt(str[1]);
		char board[][] = new char[colLen][rowLen];
		String input;
		//2. 전체 공간 정보를 입력받고 물의 위치와 고슴도치 위치를 입력받는다.
		for(int colIdx=0;colIdx<colLen;colIdx++) {
			input = br.readLine().trim();
			for(int rowIdx=0;rowIdx<rowLen;rowIdx++) {
				board[colIdx][rowIdx] = input.charAt(rowIdx);
				if(board[colIdx][rowIdx] == '*') {
					waterQ.add(new place(colIdx, rowIdx));
					board[colIdx][rowIdx] = 'X';
				}
				if(board[colIdx][rowIdx] == 'S') {
					kakQ.add(new place(colIdx, rowIdx));
					board[colIdx][rowIdx] = 'V';
				}
			}
		}
		place temp;
		int waterQSize, kakQSize;
		int result=1;
		//3. 물과 고슴도치에 대해 고슴도치의 이동이 불가능하거나 비버집에 도착할때까지 4,5를 반복한다.
		while(!kakQ.isEmpty()) {
			// 4. 물들의 위치를 기준으로 먼저 BFS를 진행한다. 물이 찬곳은 돌과 같이 이동할 수 없게한다.
			waterQSize = waterQ.size();
			for(int idx=0;idx<waterQSize;idx++) {
				temp = waterQ.poll();
				for(int dir=0;dir<4;dir++) {
					if(temp.x+dx[dir]>=0 && temp.x+dx[dir]<rowLen&&
							temp.y+dy[dir]>=0 && temp.y+dy[dir]<colLen&&
							board[temp.y+dy[dir]][temp.x+dx[dir]]!='X'&&
							board[temp.y+dy[dir]][temp.x+dx[dir]]!='D') {
						waterQ.add(new place(temp.y+dy[dir], temp.x+dx[dir]));
						board[temp.y+dy[dir]][temp.x+dx[dir]]='X';
					}
				}
			}
			//5. 고슴도치를 기준으로 BFS를 진행한다. 물은 이동할 수 있도록 별도의 문자로 처리한다.
			kakQSize = kakQ.size();
			for(int idx=0;idx<kakQSize;idx++) {
				temp = kakQ.poll();
				for(int dir=0;dir<4;dir++) {
					if(temp.x+dx[dir]>=0 && temp.x+dx[dir]<rowLen&&
							temp.y+dy[dir]>=0 && temp.y+dy[dir]<colLen&&
							board[temp.y+dy[dir]][temp.x+dx[dir]]!='X'&&
							board[temp.y+dy[dir]][temp.x+dx[dir]]!='V') {
						//6. 도착했다면 걸린 시간, 도착하기 전에 이동을 할 수 없게 되었다면 KAKTUS를 출력한다.
						if(board[temp.y+dy[dir]][temp.x+dx[dir]]=='D') {
							System.out.print(result);
							return;
						}
						kakQ.add(new place(temp.y+dy[dir], temp.x+dx[dir]));
						board[temp.y+dy[dir]][temp.x+dx[dir]]='V';
					}
				}
			}
			result++;
		}
		//6. 도착했다면 걸린 시간, 도착하기 전에 이동을 할 수 없게 되었다면 KAKTUS를 출력한다.
		System.out.print("KAKTUS");
	}
}
