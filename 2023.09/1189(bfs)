#include<bits/stdc++.h>
using namespace std;

struct hello_1 {
    int arr[5][5];
    int x;
    int y;
};

int R, C, K;

int main() {
    string str_1;
    cin >> R >> C >> K;
    hello_1 hello;

    hello.y = R - 1;
    hello.x = 0;
    for (int i = 0; i < R; i++) {
        cin >> str_1;
        for (int j = 0; j < C; j++) {
            if (str_1.c_str()[j] == 'T') hello.arr[i][j] = 2;
            else hello.arr[i][j] = 0;
        }
    }
    hello.arr[R - 1][0] = 1;
    int N = 1;
    queue<hello_1> Q_1;
    Q_1.push(hello);

    while (N < K) {
        int Q_size_1 = Q_1.size();
        for (int i = 0; i < Q_size_1; i++) {
            hello_1 temp;
            temp = Q_1.front();

            

            if (temp.y + 1 < R && temp.arr[temp.y + 1][temp.x] == 0) {
                temp.arr[temp.y + 1][temp.x] = 1;
                temp.y += 1;
                Q_1.push(temp);

            }
            temp = Q_1.front();
            if (temp.y - 1 >= 0 && temp.arr[temp.y - 1][temp.x] == 0) {
                temp.arr[temp.y - 1][temp.x] = 1;
                temp.y -= 1;
                Q_1.push(temp);

            }
            temp = Q_1.front();
            if (temp.x + 1 < C && temp.arr[temp.y][temp.x + 1] == 0) {
                temp.arr[temp.y][temp.x + 1] = 1;
                temp.x += 1;
                Q_1.push(temp);

            }
            temp = Q_1.front();
            if (temp.x - 1 >= 0 && temp.arr[temp.y][temp.x - 1] == 0) {
                temp.arr[temp.y][temp.x - 1] = 1;
                temp.x -= 1;
                Q_1.push(temp);

            }
            Q_1.pop();
        }
        N++;
    }
    
    int result = 0;
    while (!Q_1.empty()) {
        
        if (Q_1.front().y == 0 && Q_1.front().x == C - 1) result++;
        Q_1.pop();
    }
    cout << result;
}
