#include <bits/stdc++.h>
using namespace std;

vector<pair<int, int>> vec_1;
int sudoQ[10][10];
int X_map[10][10];
int Y_map[10][10];
int Z_map[10][10];
int chk_1 = 0;

void back_tracking(int a) {
    if (a == vec_1.size()) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cout << sudoQ[i][j] << " ";
            }
            cout << "\n";
        }
        chk_1=1;
        return;
    }

    int y_1 = vec_1[a].first;
    int x_1 = vec_1[a].second;

    for (int i = 1; i <= 9; i++) {
        if (X_map[y_1][i]==0 && Y_map[x_1][i]==0 && Z_map[(y_1 / 3) * 3 + (x_1 / 3)][i] == 0) {

            X_map[y_1][i] = 1;
            Y_map[x_1][i] = 1;
            Z_map[(y_1 / 3) * 3 + (x_1 / 3)][i] = 1;
            sudoQ[y_1][x_1] = i;

            back_tracking(a + 1);

            if (chk_1 == 1) return;
            
            X_map[y_1][i] = 0;
            Y_map[x_1][i] = 0;
            Z_map[(y_1 / 3) * 3 + (x_1 / 3)][i] = 0;
            sudoQ[y_1][x_1] = 0;
            
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int a;
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            cin >> a;
            sudoQ[i][j] = a;
            if (a != 0) {
                X_map[i][a] = 1;
                Y_map[j][a] = 1;
                Z_map[(i / 3) * 3 + (j / 3)][a] = 1;
            }
            else {
                vec_1.push_back(make_pair(i, j));
            }
        }
    }
    back_tracking(0);
}
