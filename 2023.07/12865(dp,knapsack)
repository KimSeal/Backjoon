//Answer
#include <bits/stdc++.h>
using namespace std;

int N, K;
int weight[101];
int value[101];
int dp[101][100001];

int main() {
	cin >> N >> K;
	for (int i = 0; i < N;i++) {
		cin >> weight[i + 1] >> value[i + 1];
	}
	for (int i = 1; i <= N;i++) {
		for (int j = 1; j <= K;j++) {
			dp[i][j] = dp[i - 1][j];
			if (j - weight[i] >= 0) {
				dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
			}
		}
	}
	cout << dp[N][K];
}


/////////////////////////
//recursive(TLE)
#include <bits/stdc++.h>
using namespace std;

int N, M;
int input;
vector<int> value;
vector<int> weight;
int max_result;
int num_call;
void dp_ing(int a, int b, int c) {
    if (a == N && max_result < b && c <= M) {
        max_result = b;
    }
    else if(a < N) {
        if (c + weight[a] <= M && value[a] > 0) {
            dp_ing(a + 1, b + value[a], c + weight[a]);
        }
        dp_ing(a + 1, b, c);
    }
}
int main() {
    cin >> N >> M;
    int num = 0;
    while (num < N) {
        num++;
        cin >> input;
        weight.push_back(input);
        cin >> input;
        value.push_back(input);
    }
    dp_ing(0, 0, 0);
    cout << max_result;
}
