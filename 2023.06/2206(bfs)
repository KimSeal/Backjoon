#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>
using namespace std;
int N, M;
int map[1001][1001];
struct player {
    int x = 0;
    int y = 0;
    int count = 0;
    int broken = 0;
};
queue<player> Q;
int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };
player player_init(int a, int b, int c, int d) {
    player player1;
    player1.x = a;
    player1.y = b;
    player1.count = c;
    player1.broken = d;
    return player1;
}
int zerochk = 0;
void bfs(player player1) {
    
    Q.pop();
    if (player1.x == N && player1.y == M) {
        zerochk = 1;
        cout << player1.count + 1;
    }
    for (int i = 0; i < 4; i++) {
        if (player1.x + dx[i] > 0 && player1.x + dx[i] <= N &&
            player1.y + dy[i] > 0 && player1.y + dy[i] <= M) {
            //cout << map[player1.y + dy[i]][player1.x + dx[i]] <<" "<<player1.broken << endl;
            if (map[player1.y + dy[i]][player1.x + dx[i]] == 0) {
                map[player1.y + dy[i]][player1.x + dx[i]] = (player1.broken==0) ? 2 : 3;
                //cout << "move check" << endl;
                Q.push(player_init(player1.x + dx[i], player1.y + dy[i], player1.count + 1, player1.broken));
            }
            else if (map[player1.y + dy[i]][player1.x + dx[i]] == 3 && player1.broken == 0) {
                //cout << "hulk crask" << endl;
                map[player1.y + dy[i]][player1.x + dx[i]] = 2;
                Q.push(player_init(player1.x + dx[i], player1.y + dy[i], player1.count + 1, 0));
            }
            else if (map[player1.y + dy[i]][player1.x + dx[i]] == 1 && player1.broken == 0) {
                //cout << "hulk crask" << endl;
                map[player1.y + dy[i]][player1.x + dx[i]] = 2;
                Q.push(player_init(player1.x + dx[i], player1.y + dy[i], player1.count + 1, 1));
            }
        }
    }
}

int main() {
    cin >> M >> N;
    string str1;
    for (int j = 1; j <= M; j++) {
        cin >> str1;
        for (int i = 1; i <= N; i++) {
            map[j][i] = str1[i-1]-'0';
        }
    }

    Q.push(player_init(1, 1, 0, 0));
    while (!Q.empty() && Q.front().count < N * M && zerochk == 0) {
        bfs(Q.front());
    }
    if (zerochk==0) {
        cout << -1;
    }
    return 0;
}
