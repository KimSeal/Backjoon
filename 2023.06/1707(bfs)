#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define RED 1
#define BLUE 2
vector<int> graph[20001];
queue<int> Q;
int K, M, N;
int visited[20001];
void bfs(int input) {
    Q.pop();
    if (!visited[input]) {
        visited[input] = RED;
    }
    for (int i = 0; i < graph[input].size(); i++) {
        if (!visited[graph[input][i]]) {
            visited[graph[input][i]] = (visited[input] == RED) ? BLUE : RED;
            Q.push(graph[input][i]);
        }
    }
}

bool twicechk() {
    int color;
    for (int i = 1; i <= M; i++) {
        color = visited[i];
        for (int j = 0; j < graph[i].size(); j++) {
            if (color == visited[graph[i][j]]) {
                return 0;
            }
        }
    }
    return 1;
}
int main() {
    int a, b;
    cin >> K;
    while (K--) {
        cin >> M >> N;
        for (int i = 0; i < N; i++) {
            cin >> a >> b;
            graph[a].push_back(b);
            graph[b].push_back(a);
        }
        for (int j = 1; j <= M; j++) {
            if (!visited[j]) {
                Q.push(j);
                while (!Q.empty()) {
                    bfs(Q.front());
                }
            }
        }
        if (twicechk() == true) {
            cout << "YES\n";
        }
        else {
            cout << "NO\n";
        }
        for (int i = 1; i <= M; i++) {
            visited[i] = 0;
            graph[i].clear();
        }
    }
}
