#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

bool map[52][52];
int answer1;
int T, M, N, K;
vector<pair<int, int>> vec;
vector<int> result;
queue<pair<int, int>> Q;


void bfs(int a, int b) {
    if (map[a - 1][b] == true) {
        map[a - 1][b] = false;
        Q.push(make_pair(a - 1, b));
    }
    if (map[a + 1][b] == true) {
        map[a + 1][b] = false;
        Q.push(make_pair(a + 1, b));
    }
    if (map[a][b - 1] == true) {
        map[a][b - 1] = false;
        Q.push(make_pair(a, b - 1));
    }
    if (map[a][b + 1] == true) {
        map[a][b + 1] = false;
        Q.push(make_pair(a, b + 1));
    }
}

int main() {
    cin >> T;
    int A, B;
    for (int t = 0; t < T;t++) {
        cin >> M >> N >> K;
        for (int i = 0; i < K; i++) {
            cin >> A >> B;
            vec.push_back(make_pair(A+1, B+1));
            map[A + 1][B + 1] = true;
        }
        answer1 = 0;
        for (int i = 0; i < vec.size(); i++) {
            int fir = vec[i].first;
            int sec = vec[i].second;
            if (map[fir][sec] == true) {
                answer1++;
                Q.push(make_pair(fir, sec));
                map[fir][sec] = false;
                while (!Q.empty()) {
                    bfs(Q.front().first, Q.front().second);
                    Q.pop();
                }
            }
        }
        vec.erase(vec.begin(), vec.end());
        result.push_back(answer1);
    }
    for (int i = 0; i < result.size(); i++) {
        cout << result[i] << "\n";
    }

}
