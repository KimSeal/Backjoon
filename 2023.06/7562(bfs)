#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include<string>
using namespace std;

queue<pair<int, int>> Q;
int N, M, N2, M2;
int mapsize;
int map[301][301];

int dx[8] = { -2, -1, 1, 2, 2, 1, -1, -2 };
int dy[8] = { -1, -2, -2, -1, 1, 2, 2, 1 };

void empty_Map() {
    while (!Q.empty())Q.pop();
    for (int i = 0; i < 301;i++) {
        for (int j = 0; j < 301;j++) {
            map[i][j] = false;
        }
    }
}

void bfs(int a, int b) {
    Q.pop();
    for (int i = 0; i < 8; i++) {
        if ((a + dx[i]) >= 0 && (a + dx[i]) < mapsize && 
            (b + dy[i]) >= 0 && (b + dy[i]) < mapsize &&
            !map[a + dx[i]][b + dy[i]]) {
            Q.push(make_pair(a + dx[i], b + dy[i]));
            map[a + dx[i]][b + dy[i]] = map[a][b]+1;
        }
    }
}
int main() {
    int turn;
    cin >> turn;
    for (int t = 0; t < turn ;t++) {
        cin >> mapsize;
        cin >> N >> M;
        Q.push(make_pair(N, M));

        map[N][M] = 1;
        cin >> N2 >> M2;

        while (!Q.empty()) {
            if (Q.front().first == N2 && Q.front().second == M2) {
                cout << map[Q.front().first][Q.front().second] - 1 << "\n";
                break;
            }
            bfs(Q.front().first, Q.front().second);
        }
        empty_Map();
    }
}
