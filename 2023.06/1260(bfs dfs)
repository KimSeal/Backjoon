#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
bool visited_d[1001];
bool visited_b[1001];
queue<int> Q;

vector<int> graph[1001];
void dfs(int n) {
    visited_d[n] = true;
    cout << n << " ";
    for (int i = 0; i < graph[n].size(); i++) {
        if (!visited_d[graph[n][i]]) dfs(graph[n][i]);
    }
}

void bfs(int n) {
    Q.pop();
    cout << n << " ";
    for (int i = 0; i < graph[n].size(); i++) {
        if (!visited_b[graph[n][i]]) {
            Q.push(graph[n][i]);
            visited_b[graph[n][i]] = true;
        }
    }
}
bool cmp(int a, int b) {
    return a < b;
}
int main() {
    int N, M, R;
    cin >> N >> M >> R;
    int A, B;
    for (int i = 0; i < M; i++) {
        cin >> A >> B;
        graph[A].push_back(B);
        graph[B].push_back(A);
    }
    for (int i = 1; i <= N; i++) {
        sort(graph[i].begin(), graph[i].end(), cmp);
    }
    dfs(R);
    cout << "\n";
    Q.push(R);
    visited_b[R] = true;
    while (!Q.empty()) {
        bfs(Q.front());
    }
    return 0;
}
