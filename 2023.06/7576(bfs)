#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include<string>
using namespace std;

queue<pair<int, int>> Q;
int N, M;
int map[1000][1000];
int dx[4] = { 0,1, 0,-1};
int dy[4] = { -1,0,1,0};

int max_value = 0;

void bfs(int a, int b) {
    Q.pop();
    for (int i = 0; i < 4; i++) {
        if ((a + dx[i]) >= 0 && (a + dx[i]) < N && 
            (b + dy[i]) >= 0 && (b + dy[i]) < M &&
            map[a + dx[i]][b + dy[i]] ==0) {

            Q.push(make_pair(a + dx[i], b + dy[i]));
            max_value--;
            map[a + dx[i]][b + dy[i]] = map[a][b]+1;
            if (max_value == 0) {
                cout << map[a + dx[i]][b + dy[i]]-1;
            }

        }
    }
}
int main() {
    cin >> M >> N;
    int a;
    int zerochk = 0;
    for (int i = 0; i < N;i++) {
        for (int j = 0; j < M;j++) {
            cin >> a;
            map[i][j] = a;
            if (a == 1) {
                Q.push(make_pair(i, j));
                zerochk = 1;
            }
            else if(a==0){
                max_value++;
            }
        }
    }
    if (zerochk==1 && max_value==0) {
        cout << 0;
    }
    if (zerochk==1) {
        while (!Q.empty()) {
            bfs(Q.front().first, Q.front().second);
        }
    }
    if (max_value>0 || zerochk ==0) {
        cout << -1;
    }
}
