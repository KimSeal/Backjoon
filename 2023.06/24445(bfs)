#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
int level = 2;
int visited[100001] = { 0, };
vector<int> edge[100001];
queue<int> Q;

int N, M, R;
void bfs(int n) {
	for (int i = 0; i < edge[n].size();i++) {
		if (visited[edge[n][i]] == 0) {
			Q.push(edge[n][i]);
			visited[edge[n][i]] = level++;
		}
	}
}
bool cmp(int a, int b) {
	return a > b;
}
int main() {
	cin >> N >> M >> R;
	int A, B;
	for (int i = 0; i < M; i++) {
		cin >> A >> B;
		edge[A].push_back(B);
		edge[B].push_back(A);
	}
	for (int i = 1; i <= N; i++) {
		sort(edge[i].begin(), edge[i].end(), cmp);
	}
	Q.push(R);
	visited[R] = 1;
	while(!Q.empty()) {
		bfs(Q.front());
		Q.pop();
	}
	for (int i = 1; i <= N;i++) {
		cout << visited[i] << "\n";
	}
	return 0;
}
