#include <bits/stdc++.h>

int N;
int bubbleNum[5] = { 0,0,0,0,0};
long long dp[11][11][11][11][11][5][5];
using namespace std;
long long makeDp(int pre, int cur) {
    long long result = dp[bubbleNum[0]][bubbleNum[1]][bubbleNum[2]][bubbleNum[3]][bubbleNum[4]][pre][cur];
    if (result != -1) return result;
    else if (bubbleNum[0] + bubbleNum[1] + bubbleNum[2] + bubbleNum[3] + bubbleNum[4] == 0) return 1;
    else {
        result = 0;
        for (int i = 0; i < N; i++) {
            if (bubbleNum[i] != 0 && pre != i && cur != i) {
                bubbleNum[i]--;
                result += makeDp(cur, i);
                bubbleNum[i]++;
            }
        }
        return dp[bubbleNum[0]][bubbleNum[1]][bubbleNum[2]][bubbleNum[3]][bubbleNum[4]][pre][cur] = result;
    }
    return 0;
}
int main() {
    long long result = 0;
    cin >> N;
    for (int i = 0; i < N;i++) {
        cin >> bubbleNum[i];
    }
    memset(dp, -1, sizeof(dp));
    for (int i = 0; i < N;i++) {
        for (int j = 0; j < N;j++) {
            
            if (i != j) {
                bubbleNum[i]--;
                bubbleNum[j]--;
                result += makeDp(i, j);
                bubbleNum[i]++;
                bubbleNum[j]++;
            }

        }
    }
    cout << result;
}
