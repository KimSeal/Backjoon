import java.io.*;
import java.util.*;
/*
 * 1. 사용자로부터 숫자 입력 범위와 고를 숫자 수 받기.
 * 2. 받은 숫자 기반으로 선택 숫자를 저장할 배열과 고른 숫자 여부 판단할 배열 생성.
 * 3. 재귀 함수를 통해 완전 탐색 실행
 * 		3.1 기저조건 : 받은 숫자만큼 선택했을 경우 return
 * 		3.2 전처리 로직 : 이미 선택된 숫자는 넘어가고 선택하지 않은 숫자를 접한 경우 
 * 					  해당 사실에 맞추어 배열 업로드
 * 		3.3 재귀 함수 호출 : 숫자를 하나 더 선택한 상태를 인자로서 전달한 채 재귀 함수 호출
 * 		3.4 후처리 로직 : 업로드 전의 상태로 원복
 * 4. string builder에 쌓인 문자열 출력
 * 
 */

public class NM {
	//사용자로부터 입력을 받을 BufferedReader
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	//최종 문자열을 저장할 StringBuilder
	static StringBuilder sb = new StringBuilder(); 
	
	static int elementNumber; //고를 숫자의 범위
	static int selectNumber;  //고를 숫자의 수
	static boolean[] selectedElementList; //고른 숫자 유무 확인을 위한 배열
	static int[] elementList;			  //선택된 숫자 배열
	
	public static void permutation(int selectIdx) {
		//3.1. 기저조건
		//   고를 숫자의 수 만큼 숫자가 선택되었으면 함수 return
		if(selectIdx == selectNumber) {
			//기저 조건 충족시 Stringbuilder에 선택된 숫자 배열 추가.
			for(int idx=0; idx<selectNumber;idx++)
				sb.append(elementList[idx] + " ");
			//포멧을 위한 줄 바꿈
			sb.append("\n");
			return;
		}
		
		//모든 element에 대해 체크(순열이기에 순서 상관없으므로)
		for(int idx = 0;idx<elementNumber;idx++) {
			//3.2 전처리 로직
			//이미 선택한 숫자는 넘어가게 된다.
			if(selectedElementList[idx]) continue;
			//선택한 숫자에 대해 선택되었음을 알리고 선택 숫자 배열에 추가.
			selectedElementList[idx] = true;
			elementList[selectIdx] = idx+1;
			
			//3.3 재귀 함수 호출
			permutation(selectIdx+1);
			
			//3.4 후처리 로직
			//선택되었던 숫자에 대해 할당되었던 숫자/체크 해체
			selectedElementList[idx] = false;
			elementList[selectIdx] = 0;
		}
		
	}
	public static void main(String[] args) throws IOException {
		//1. 사용자로부터 숫자 입력 범위와 고를 숫자 수 받기.
		//사용자로 부터 입력을 받고 공백을 기준으로 분해아여 받는다.
		String firstInput = br.readLine().trim();
		String[] splitString = firstInput.split(" ");
		//받은 String을 integer로 변환해서 선택할 원소의 수와 숫자의 범위를 정한다.
		elementNumber = Integer.parseInt(splitString[0]);
		selectNumber = Integer.parseInt(splitString[1]);
		
		//2. 받은 숫자 기반으로 선택 숫자를 저장할 배열과 고른 숫자 여부 판단할 배열 생성.
		elementList = new int[selectNumber];
		selectedElementList = new boolean[elementNumber];
		
		//3. 재귀 함수를 통해 완전 탐색 실행
		permutation(0);
		//4. string builder에 쌓인 문자열 출력
		System.out.println(sb);

	}

}
