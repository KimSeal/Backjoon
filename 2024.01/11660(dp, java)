import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
/*
 * 1. 사용자로부터 배열의 길이와 총합 범위 입력 횟수를 받는다.
 * 2. 배열의 길이만큼 배열을 만들고 내부에 값을 넣어준다.
 * 		2.1 여기서 누적합을 사용하여 한칸 위, 한칸 왼쪽의 값과 원소값을 더하고 좌측 상단 값을 빼서 저장한다.
 * 			이렇게 되면 해당 구간까지의 면 범위 동안의 합을 구할 수 있다.
 * 3. 사용자로부터 범위를 입력 받는다.
 * 4. 누적합 차이를 통해 범위 구간 합을 구하고 StringBuilder에 업로드
 * 		4.1 여기서 누적합을 사용하여 한칸 위, 한칸 왼쪽의 값과 원소값을 더하고 좌측 상단 값을 빼서 저장한다.
 * 			이렇게 되면 해당 구간까지의 면 범위 동안의 합을 구할 수 있다.
 * 5. 최종 문자열을 출력한다.
 */
public class add5 {
	//사용자로부터 입력을 받을 BufferedReader
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	
	//최종 문자열을 저장할 StringBuilder
	static StringBuilder sb = new StringBuilder();
	
	//배열 너비, 입력 범위 갯수, 배치칸 관련 변수
	static int arrayLength, inputNum, sumArray[][];
	
	//입력받은 포인트 저장할 변수
	static int[] inputCommand = new int[4];
	
	
	public static void main(String[] args)throws IOException {
		//1. 사용자로부터 배열의 길이와 총합 범위 입력 횟수를 받는다.
		String[] firstInput = br.readLine().trim().split(" ");
		arrayLength = Integer.parseInt(firstInput[0]);
		inputNum = Integer.parseInt(firstInput[1]);
		
		//2. 배열의 길이만큼 배열을 만들고 내부에 값을 넣어준다.
		sumArray = new int [arrayLength+1][arrayLength+1];
		for(int colIdx =1; colIdx <= arrayLength; colIdx++) {
			String[] arrayInput = br.readLine().trim().split(" ");
			
			//2.1 여기서 누적합을 사용하여 한칸 위, 한칸 왼쪽의 값과 원소값을 더하고 좌측 상단 값을 빼서 저장한다.
			//	  이렇게 되면 해당 구간까지의 면 범위 동안의 합을 구할 수 있다.
			for(int rowIdx = 1;rowIdx <=arrayLength; rowIdx++)
				sumArray[colIdx][rowIdx] = sumArray[colIdx-1][rowIdx] + sumArray[colIdx][rowIdx-1] + Integer.parseInt(arrayInput[rowIdx - 1]) - sumArray[colIdx-1][rowIdx-1];
		}

		for(int idx =0; idx<inputNum; idx++) {
			//3. 사용자로부터 범위를 입력 받는다.
			String[] pointInput = br.readLine().trim().split(" ");
			for(int inputIdx = 0;inputIdx<4;inputIdx++) { 
				inputCommand[inputIdx] = Integer.parseInt(pointInput[inputIdx]);
			}
			//4. 누적합 차이를 통해 범위 구간 합을 구하고 StringBuilder에 업로드
			//4.1 여기서 누적합을 사용하여 한칸 위, 한칸 왼쪽의 값과 원소값을 더하고 좌측 상단 값을 빼서 저장한다.
			//	   이렇게 되면 해당 구간까지의 면 범위 동안의 합을 구할 수 있다.
			sb.append(sumArray[inputCommand[2]][inputCommand[3]]
					- sumArray[inputCommand[2]][inputCommand[1]-1]
					- sumArray[inputCommand[0]-1][inputCommand[3]]
					+ sumArray[inputCommand[0]-1][inputCommand[1]-1]
					).append("\n");
		}
		//5. 최종 문자열을 출력한다.
		System.out.print(sb);
	}
}
