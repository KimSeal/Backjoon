#include<bits/stdc++.h>
using namespace std;
int N;
double input_1, input_2;
vector< pair<long long int ,long long int> > vec_1;
vector<pair<double, int>> vec_2;
int under_dot;
double under_x = 40001;
double under_y = 40001;
stack<pair<long long int, long long int>> stk_1;
//1708
long long int ccw(pair<long long int, long long int>a, pair<long long int, long long int> b, pair<long long int, long long int> c) {
    return (a.first - b.first) * (b.second - c.second) -
        (a.second - b.second) * (b.first - c.first);
}

bool cmp(pair<long long int, long long int> a, pair<long long int, long long int> b) {
    if (a.first == under_x && a.second == under_y) return true;
    if (b.first == under_x && b.second == under_y) return false;
    pair<long long int, long long int> temp_1 = make_pair(under_x, under_y);
    if (ccw(temp_1, a, b) > 0)  return true; 
    else if(ccw(temp_1, a, b)<0) return false;
    else {
        if (a.second == b.second) return a.first < b.first;
        else return a.second < b.second;
    }

    //return (a.first-under_x) * (b.second-under_y) > (a.second-under_y)* (b.first-under_x);
}

int main() {
    cin >> N;
    for (int i = 0; i < N; i++) {
        cin >> input_1 >> input_2;
        if (under_y == input_2 && input_1 < under_x) {
            under_dot = i;
            under_x = input_1;
            under_y = input_2;
        }
        else if (under_y > input_2) {
            under_dot = i;
            under_x = input_1;
            under_y = input_2;
        }
        vec_1.push_back(make_pair(input_1, input_2));
    }
    //push dot position and find lowest dot
    // 
    //cout << "\n";
    sort(vec_1.begin(), vec_1.end(), cmp);

    
    /*for (int i = 0; i < vec_1.size(); i++) {
        cout << vec_1[i].first << " " << vec_1[i].second <<"\n";
    }*/
    
    stk_1.push(make_pair(under_x, under_y));
    stk_1.push(make_pair(vec_1[1].first, vec_1[1].second));
    pair<long long int, long long int> second_1;
    pair<long long int, long long int> third_1;

    for (int i = 2; i < vec_1.size(); i++) {
        third_1 = make_pair(vec_1[i].first, vec_1[i].second);
        while(stk_1.size() >= 2) {
            
            second_1 = stk_1.top();
            stk_1.pop();
            if (ccw(stk_1.top(), second_1, third_1) > 0) {
                stk_1.push(second_1);
                break;
            }
        }
        
        stk_1.push(third_1);
    }
    cout << stk_1.size();
    
}
