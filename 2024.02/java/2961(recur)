import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
/*
 * 1. 사용자로부터 재료 갯수를 입력받고 재료 정보를 담을 배열을 생성한다.
 * 2. 재료당 신맛/쓴맛을 입력받아 저장한다.
 * 3. 재귀 함수를 호출한다.
 * 		3.1 기저 조건 : 모든 원소 탐색 시, 하나라도 재료를 골랐다면 신맛과 쓴맛을 비교한다.
 * 					이후 차가 기존의 차이보다 작다면 이를 업데이트 해주고 반환
 * 		3.2 전처리 로직 : 따로 존재하지 않는다.
 * 		3.3 재귀 메소드 호출 : 해당 순번에 해당하는 재료를 넣었을/넣지 않았을 때의 경우를 인자로 하여 호출
 * 		3.4 후처리 로직 : 따로 존재하지 않는다.
 * 4. 구해진 최소 차이를 출력한다.
 * 
 */
public class cook {
	//사용자로부터 입력을 받을 BufferedReader
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	//최종 문자열을 저장할 StringBuilder
	static StringBuilder sb = new StringBuilder(); 
	//숫자길이, 출력할 최소 값 차이
	static int N, result= 1999999999;
	//입력된 재료 정보를 저장할 2차원 배열
	static int [][] command; 
	
	//모든 경우에 대해 쓴 맛과 신 맛의 차이를 구하는 재귀 함수.
	static void recur(int selNum, int sour, int bitter, boolean chk) {
		//3.1 기저 조건 : 모든 원소 탐색 시, 하나라도 재료를 골랐다면 신맛과 쓴맛을 비교한다.
		// 				이후 차가 기존의 차이보다 작다면 이를 업데이트 해주고 반환
		if(selNum == N) {
			// 하나라도 재료를 고르지 않았다면 반영되지 않는다.
			if(!chk) return; 
			//차가 기존의 차이보다 작다면 이를 업데이트 해주고 반환
			result = (result > Math.abs(sour - bitter))? Math.abs(sour - bitter): result  ;
			return;
		}
		//3.3 재귀 메소드 호출 : 해당 순번에 해당하는 재료를 넣었을/넣지 않았을 때의 경우를 인자로 하여 호출
		recur(selNum+1, sour * command[selNum][0], bitter + command[selNum][1], true);
		recur(selNum+1, sour , bitter, (!chk) ? false : true);
	}
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		//1. 사용자로부터 재료 갯수를 입력받고 재료 정보를 담을 배열을 생성한다.
		N = Integer.parseInt(br.readLine().trim());
		command = new int[N][2];
		//2. 재료당 신맛/쓴맛을 입력받아 저장한다.
		for(int idx=0;idx<N;idx++) {
			String [] inputStr = br.readLine().trim().split(" ");
			command[idx][0] = Integer.parseInt(inputStr[0]);
			command[idx][1] = Integer.parseInt(inputStr[1]);
		}
		//3. 재귀 함수를 호출한다.
		recur(0,1,0, false);
		//4. 구해진 최소 차이를 출력한다.
		System.out.println(result);
	}

}
