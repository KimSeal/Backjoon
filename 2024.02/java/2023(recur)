import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
/*
 * 1. 사용자로부터 숫자길이를 입력받는다.
 * 2. 두번쨰 인자 값에 10을 곱한 후, 숫자를 더하여 각 값이 소수인지 확인한다.
 * 3. 2번을 재귀적으로 호출하여 입력받은 숫자 길이에 도달할 때까지 반복한다.
 * 4. 숫자 길이에 도달했다면 StringBuilder에 업로드한다.
 * 5. StringBuilder를 출력한다.
 */

public class special {
	//사용자로부터 입력을 받을 BufferedReader
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	//최종 문자열을 저장할 StringBuilder
	static StringBuilder sb = new StringBuilder(); 
	//숫자길이
	static int N;
	
	//소수인지 확인하는 메소드
	public static boolean sosuCheck(int inputNum) {
		//제곱근 이하의 수 중 약수가 있는지 확인
		for(int idx=2;idx<=Math.sqrt(inputNum);idx++)
			//약수 존재(소수 아님) 확인
			if(inputNum % idx == 0 ) return false;
		//소수임을 확인
		return true;
	}
	
	//재귀 함수.
	public static void recur(int num, int input) {
		//+기저조건 (숫자길이에 도달)
		//3. 2번을 재귀적으로 호출하여 입력받은 숫자 길이에 도달할 때까지 반복한다.
		if(num == N) {
			//4. 숫자 길이에 도달했다면 StringBuilder에 업로드한다.
			sb.append(input).append("\n");
			return;
		}
		
		//막 들어왔을 경우, 1자리 수 소수에 대해서만 처리.(가지치기)
		if(num == 0) {
			recur(1, 2); recur(1, 3); recur(1, 5); recur(1, 7);
			return;
		}
		
		int inputTemp;
		//2. 두번쨰 인자 값에 10을 곱한 후, 숫자를 더하여 각 값이 소수인지 확인한다.
		//	 2를 제외한 모든 짝수는 소수가 아니므로 홀수만 처리
		for(int lastNum=1; lastNum<10; lastNum+=2) {
			//전처리 로직
			inputTemp = input * 10 + lastNum; 
			//소수 확인, 및 재귀 메소드 호출
			if(sosuCheck(inputTemp)) recur(num+1, inputTemp);
		}
	}
	
	public static void main(String[] args) throws IOException {
		// 1. 사용자로부터 숫자길이를 입력받는다.
		N = Integer.parseInt(br.readLine().trim());
		recur(0,0);
		//5. StringBuilder를 출력한다.
		System.out.print(sb);
	}

}
