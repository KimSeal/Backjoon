import java.io.*;
import java.util.*;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static class Point{
		int x;
		int y;
		Point(int y, int x){
			this.y = y;
			this.x = x;
		}
	}
	static int colNum, rowNum, stage[][],tempStage[][], result, zeroNum;
	static int selNum[] = new int[3];
	static int dy[] = {-1,0,1,0}, dx[] = {0,1,0,-1};
	static List<Point> list = new ArrayList<>();
	public static int bfs() {
		Queue<Point> queue = new LinkedList<>();
		for(int idx=0;idx<rowNum * colNum;idx++) {
			tempStage[idx/rowNum][idx%rowNum] = stage[idx/rowNum][idx%rowNum];
		}
		for(int idx=0;idx<3;idx++) {
			tempStage[selNum[idx]/rowNum][selNum[idx]%rowNum] = 1;
		}
		int tempSafe =zeroNum-3;
		for(Point tempVirus : list) {
			queue.add(new Point(tempVirus.y, tempVirus.x));
			while(!queue.isEmpty()) {
				Point temp = queue.poll();
				for(int idx=0;idx<4;idx++) {
					if(temp.y+dy[idx]>=0 && temp.y+dy[idx]<colNum&&
							temp.x+dx[idx]>=0 && temp.x+dx[idx]<rowNum && 
							tempStage[temp.y+dy[idx]][temp.x+dx[idx]] == 0) {
						tempSafe--;
						tempStage[temp.y+dy[idx]][temp.x+dx[idx]] = 2; 
						queue.add(new Point(temp.y+dy[idx],temp.x+dx[idx] ));
					}
				}
			}
		}
		//System.out.println(tempSafe);
		result = (result> tempSafe) ?  result : tempSafe;
		return 0;
	}
	public static void makeCombi(int selCount, int curPoint) {
		if(selCount == 3) {
			//System.out.println(selNum[0]+ " " + selNum[1]+" "+selNum[2]);
			bfs();
			return;
		}
		for(int idx=curPoint; idx<colNum*rowNum; idx++) {
			if(stage[idx/rowNum][idx%rowNum] == 0) {
				selNum[selCount] = idx;
				makeCombi(selCount+1, idx+1);
			}
		}
	}
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		String[] inputStr = br.readLine().trim().split(" ");
		colNum = Integer.parseInt(inputStr[0]);
		rowNum= Integer.parseInt(inputStr[1]);
		stage = new int [colNum][rowNum];
		tempStage = new int[colNum][rowNum];
		for(int colIdx=0;colIdx<colNum;colIdx++) {
			inputStr = br.readLine().trim().split(" ");
			for(int rowIdx=0;rowIdx<rowNum;rowIdx++) {
				stage[colIdx][rowIdx] = Integer.parseInt(inputStr[rowIdx]);
				if(stage[colIdx][rowIdx] == 0) zeroNum++;
				else if(stage[colIdx][rowIdx] == 2) list.add(new Point(colIdx, rowIdx));
			}
		}
		makeCombi(0,0);
		System.out.println(result);
	}

}
