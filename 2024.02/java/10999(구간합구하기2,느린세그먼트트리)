import java.io.*;
import java.util.*;

public class Main {
	static BufferedReader br = new BufferedReader (new InputStreamReader(System.in));
	static StringBuilder sb = new StringBuilder();
	
	static int arrLen, changeNum, printNum;
	static long arr[], segTree[], lazy[];
	static long init(int start, int end, int node) {
		if(start==end) {return segTree[node] = arr[start];}
		int mid = (start+end)/2;
		return segTree[node] = init(start, mid, node*2) + init(mid+1, end, node*2+1);
	}
	static void update_lazy(int start, int end, int node) {
		if(lazy[node]!= 0) {
			segTree[node] += (lazy[node]* (end - start+1));
			if(start!= end) {
				lazy[node*2] += lazy[node];
				lazy[node*2+1] += lazy[node];
			}
			lazy[node]=0;
		}
	}
	static long sum(int left, int right, int start, int end, int node) {
		update_lazy(left, right, node);
		if(right<start || left>end) return 0;
		if(start<=left && right <= end) {return segTree[node];}
		int mid = (left+right)/2;
		return sum(left, mid, start, end, node*2) + sum(mid+1, right, start, end, node*2+1);
	}
	static void update(int left, int right, int start, int end, int node, long change) {
		update_lazy(left, right, node);
		if(right<start || left>end) return;
		if(start<=left && right <= end) {
			segTree[node] += change*(right-left+1);
			if(right != left) {
				lazy[node*2] += change;
				lazy[node*2+1] += change;
			}
			return;
		}

		int mid = (left+right)/2;
		update(left, mid, start, end, node*2, change);
		update(mid+1, right, start, end, node*2+1, change);
		segTree[node] = segTree[node*2] + segTree[node*2+1];
	}
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		String [] input = br.readLine().trim().split(" ");
		arrLen = Integer.parseInt(input[0]);
		changeNum = Integer.parseInt(input[1]);
		printNum = Integer.parseInt(input[2]);
		arr = new long [arrLen];
		lazy = new long [arrLen*4];
		segTree = new long[arrLen*4];
		for(int idx=0;idx<arrLen;idx++) {
			arr[idx] = Long.parseLong(br.readLine().trim());
		}
		init(0, arrLen-1, 1);
		/*for(long temp : segTree) {
			System.out.print(temp + " ");
		}*/
		for(int idx=0;idx<changeNum+printNum;idx++) {
			input = br.readLine().trim().split(" ");
			if(Integer.parseInt(input[0])==1) update(0,arrLen-1, Integer.parseInt(input[1])-1, Integer.parseInt(input[2])-1, 1,Long.parseLong(input[3]));
			if(Integer.parseInt(input[0])==2) sb.append(sum(0,arrLen-1, Integer.parseInt(input[1])-1, Integer.parseInt(input[2])-1, 1) + "\n");
		}
		System.out.println(sb);
	}
}
