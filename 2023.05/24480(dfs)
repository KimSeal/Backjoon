#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;
int visited[100001]={ 0, };
vector<int> edge[100001];
int N, M, R;
int level = 1;
void dfs(int n) {
	visited[n]= level;
	level++;
	int size0 = edge[n].size();
	for (int i = 0; i < size0;i++) {
		if (visited[ edge[n][i] ] == 0) {
			dfs(edge[n][i]);
		}
	}
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M >> R;
	int A, B;
	for (int i = 0; i < M;i++) {
		cin >> A >> B;
		edge[A].push_back(B);
		edge[B].push_back(A);

	}
	for (int i = 1; i <= N; i++) {
		sort(edge[i].begin(), edge[i].end(), greater<int>());
	}
	dfs(R);
	for (int i = 1; i <= N;i++) {
		cout << visited[i] << "\n";
	}
	return 0;
}
