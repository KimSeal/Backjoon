#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <deque>
using namespace std;
#define MAX 100001
int main() {
	int N, K;
	cin >> N >> K;
	//priority_queue<pair<int, int>> road;

	priority_queue<pair<int, int>, vector<pair<int,int>>, greater<pair<int,int>> > road;
	int visited[MAX] = { 0, N};
	visited[N] = 1;
	road.push(make_pair(0, N));
	while (!road.empty()) {
		int value = road.top().first;
		int cur = road.top().second;
		road.pop();
		if (cur==K) {
			cout << (value );
			break;
		}
		if (cur*2 < MAX && visited[cur*2]==0) {
			road.push(make_pair(value, cur * 2));
			visited[cur * 2] = 1;
		}
		if (cur +1 < MAX && visited[cur+1] == 0) {
			road.push(make_pair(value + 1, cur +1));
			visited[cur +1] = 1;
		}
		if (cur - 1 >= 0 && visited[cur - 1] == 0) {
			road.push(make_pair(value + 1, cur -1));
			visited[cur -1] = 1;
		}
	}
}

/////////////////use deque///////////////////////////////
#include <iostream>
#include<deque>
#include <algorithm>
using namespace std;
#define MAX 100001
int main() {
	int N, K;
	cin >> N >> K;
	deque<int> dq;
	int visited[100001] = { 0, };
	visited[N] = 1;
	dq.push_front(N);
	int time = 0;
	while (!dq.empty()) {
		int cur = dq.front();
		dq.pop_front();
		if (cur == K) {
			cout << visited[cur]-1;
			break;
		}
		if (cur *2<MAX && visited[cur*2]==0) {
			dq.push_front(cur * 2);
			visited[cur * 2] = visited[cur];
		}
		if (cur +1 < MAX && visited[cur +1] == 0) {
			dq.push_back(cur+1);
			visited[cur+1] = visited[cur] + 1;
		}
		if (cur - 1 >=0 && visited[cur - 1] == 0) {
			dq.push_back(cur - 1);
			visited[cur - 1] = visited[cur] + 1;
		}
	}
}
